<!-- Thống kê đơn hàng -->
<div class="row mb-4">
  <div class="col-md-6 col-xl-3 mb-3">
    <div class="card border-left-primary shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Tổng đơn hàng</div>
            <div class="h5 mb-0 font-weight-bold text-gray-800"><%= stats.total %></div>
          </div>
          <div class="col-auto">
            <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="col-md-6 col-xl-3 mb-3">
    <div class="card border-left-success shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Đã thanh toán</div>
            <div class="h5 mb-0 font-weight-bold text-gray-800"><%= stats.totalPaid %></div>
          </div>
          <div class="col-auto">
            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="col-md-6 col-xl-3 mb-3">
    <div class="card border-left-warning shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Chờ thanh toán</div>
            <div class="h5 mb-0 font-weight-bold text-gray-800"><%= stats.totalUnpaid %></div>
          </div>
          <div class="col-auto">
            <i class="fas fa-clock fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="col-md-6 col-xl-3 mb-3">
    <div class="card border-left-info shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Đang giao hàng</div>
            <div class="h5 mb-0 font-weight-bold text-gray-800"><%= stats.shipped %></div>
          </div>
          <div class="col-auto">
            <i class="fas fa-shipping-fast fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Danh sách đơn hàng -->
<div class="card shadow mb-4">
  <div class="card-header py-3 d-flex justify-content-between align-items-center">
    <h6 class="m-0 font-weight-bold text-primary">Danh sách đơn hàng</h6>
    
    <!-- Xuất CSV -->
    <a id="export-csv-link" href="/admin/orders/export" class="btn btn-sm btn-success">
      <i class="fas fa-file-csv me-1"></i> Xuất CSV
    </a>
  </div>
  
  <div class="card-body">
    <!-- Bộ lọc -->
    <div class="row mb-4">
      <div class="col-md-10">
        <div class="d-flex flex-wrap">
          <div class="me-2 mb-2">
            <select id="status-filter" class="form-select form-select-sm">
              <option value="">Tất cả trạng thái</option>
              <option value="pending" <%= filter.status === 'pending' ? 'selected' : '' %>>Chờ xử lý</option>
              <option value="processing" <%= filter.status === 'processing' ? 'selected' : '' %>>Đang xử lý</option>
              <option value="shipped" <%= filter.status === 'shipped' ? 'selected' : '' %>>Đang giao</option>
              <option value="delivered" <%= filter.status === 'delivered' ? 'selected' : '' %>>Đã giao</option>
              <option value="canceled" <%= filter.status === 'canceled' ? 'selected' : '' %>>Đã hủy</option>
            </select>
          </div>
          
          <div class="me-2 mb-2">
            <select id="payment-filter" class="form-select form-select-sm">
              <option value="">Tất cả thanh toán</option>
              <option value="cod" <%= filter.paymentMethod === 'cod' ? 'selected' : '' %>>Tiền mặt</option>
              <option value="paypal" <%= filter.paymentMethod === 'paypal' ? 'selected' : '' %>>PayPal</option>
              <option value="vnpay" <%= filter.paymentMethod === 'vnpay' ? 'selected' : '' %>>VNPay</option>
            </select>
          </div>
          
          <div class="me-2 mb-2">
            <input type="text" id="date-range" class="form-control form-control-sm" placeholder="Khoảng thời gian" value="<%= filter.dateRange %>">
          </div>
          
          <form action="/admin/orders" method="GET" class="d-flex mb-2">
            <input type="hidden" name="status" value="<%= filter.status %>">
            <input type="hidden" name="paymentMethod" value="<%= filter.paymentMethod %>">
            <input type="hidden" name="dateRange" value="<%= filter.dateRange %>" id="date-range-hidden">
            
            <div class="input-group">
              <input type="text" name="search" class="form-control form-control-sm" placeholder="Tìm kiếm..." value="<%= search %>">
              <button type="submit" class="btn btn-sm btn-primary">
                <i class="fas fa-search"></i>
              </button>
            </div>
          </form>
        </div>
      </div>
      
      <div class="col-md-2 text-end">
        <button id="reset-filter" class="btn btn-sm btn-secondary">
          <i class="fas fa-redo"></i> Đặt lại
        </button>
      </div>
    </div>
    
    <!-- Badge hiển thị các bộ lọc đang áp dụng -->
    <% if (filter.status || filter.paymentMethod || filter.dateRange) { %>
      <div class="mb-3">
        <span class="me-2">Bộ lọc đang áp dụng:</span>
        <% if (filter.status) { %>
          <span class="badge bg-primary me-2">
            Trạng thái: 
            <% if (filter.status === 'pending') { %>Chờ xử lý
            <% } else if (filter.status === 'processing') { %>Đang xử lý
            <% } else if (filter.status === 'shipped') { %>Đang giao
            <% } else if (filter.status === 'delivered') { %>Đã giao
            <% } else if (filter.status === 'canceled') { %>Đã hủy
            <% } %>
          </span>
        <% } %>
        
        <% if (filter.paymentMethod) { %>
          <span class="badge bg-info me-2">
            Thanh toán: 
            <% if (filter.paymentMethod === 'cod') { %>Tiền mặt
            <% } else if (filter.paymentMethod === 'paypal') { %>PayPal
            <% } else if (filter.paymentMethod === 'vnpay') { %>VNPay
            <% } %>
          </span>
        <% } %>
        
        <% if (filter.dateRange) { %>
          <span class="badge bg-secondary me-2">
            Thời gian: <%= filter.dateRange %>
          </span>
        <% } %>
      </div>
    <% } %>
    
    <!-- Bảng đơn hàng -->
    <div class="table-responsive">
      <table class="table table-bordered" id="ordersTable" width="100%" cellspacing="0">
        <thead>
          <tr>
            <th>Mã đơn hàng</th>
            <th>Khách hàng</th>
            <th>Ngày đặt</th>
            <th>Tổng tiền</th>
            <th>Phương thức thanh toán</th>
            <th>Trạng thái thanh toán</th>
            <th>Trạng thái đơn hàng</th>
            <th>Thao tác</th>
          </tr>
        </thead>
        <tbody>
          <% if (orders && orders.length > 0) { %>
            <% orders.forEach(order => { %>
              <tr>
                <td>
                  <a href="/admin/orders/<%= order._id %>" class="text-primary font-weight-bold">
                    #<%= order.orderNumber %>
                  </a>
                </td>
                <td>
                  <% if (order.user) { %>
                    <%= order.user.name %>
                  <% } else { %>
                    <%= order.shippingAddress.fullName %>
                    <small class="text-muted">(Khách)</small>
                  <% } %>
                </td>
                <td><%= new Date(order.createdAt).toLocaleDateString('vi-VN') %></td>
                <td><%= order.totalAmount ? order.totalAmount.toLocaleString('vi-VN') : '0' %> ₫</td>
                <td>
                  <% if (order.paymentMethod === 'cod') { %>
                    <span class="badge bg-secondary">Tiền mặt</span>
                  <% } else if (order.paymentMethod === 'paypal') { %>
                    <span class="badge bg-primary">PayPal</span>
                  <% } else if (order.paymentMethod === 'vnpay') { %>
                    <span class="badge bg-info">VNPay</span>
                  <% } %>
                </td>
                <td>
                  <% if (order.isPaid) { %>
                    <span class="badge bg-success">Đã thanh toán</span>
                  <% } else { %>
                    <span class="badge bg-warning text-dark">Chưa thanh toán</span>
                  <% } %>
                </td>
                <td>
                  <select class="form-select form-select-sm order-status-select" 
                         data-order-id="<%= order._id %>" 
                         <%= order.status === 'delivered' || order.status === 'canceled' ? 'disabled' : '' %>>
                    <option value="pending" <%= order.status === 'pending' ? 'selected' : '' %>>Chờ xử lý</option>
                    <option value="processing" <%= order.status === 'processing' ? 'selected' : '' %>>Đang xử lý</option>
                    <option value="shipped" <%= order.status === 'shipped' ? 'selected' : '' %>>Đang giao</option>
                    <option value="delivered" <%= order.status === 'delivered' ? 'selected' : '' %>>Đã giao</option>
                    <option value="canceled" <%= order.status === 'canceled' ? 'selected' : '' %>>Đã hủy</option>
                  </select>
                </td>
                <td>
                  <div class="btn-group">
                    <a href="/admin/orders/<%= order._id %>" class="btn btn-sm btn-info" title="Xem chi tiết">
                      <i class="fas fa-eye"></i>
                    </a>
                    <button class="btn btn-sm btn-primary print-invoice" data-order-id="<%= order._id %>" title="In hóa đơn">
                      <i class="fas fa-print"></i>
                    </button>
                  </div>
                </td>
              </tr>
            <% }); %>
          <% } else { %>
            <tr>
              <td colspan="8" class="text-center">Không có đơn hàng nào</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>
    
    <!-- Phân trang -->
    <% if (totalPages > 1) { %>
      <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center mt-4">
          <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
            <a class="page-link" href="<%= paginationUrl(currentPage - 1) %>" aria-label="Previous">
              <span aria-hidden="true">&laquo;</span>
            </a>
          </li>
          
          <% for(let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
              <a class="page-link" href="<%= paginationUrl(i) %>"><%= i %></a>
            </li>
          <% } %>
          
          <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
            <a class="page-link" href="<%= paginationUrl(currentPage + 1) %>" aria-label="Next">
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
        </ul>
      </nav>
    <% } %>
  </div>
</div>

<!-- Cập nhật trạng thái Modal -->
<div class="modal fade" id="statusUpdateModal" tabindex="-1" aria-labelledby="statusUpdateModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="statusUpdateModalLabel">Cập nhật trạng thái đơn hàng</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Bạn có chắc chắn muốn cập nhật trạng thái đơn hàng thành <span id="new-status-text" class="fw-bold"></span>?</p>
        
        <div class="mb-3">
          <label for="status-note" class="form-label">Ghi chú (tùy chọn)</label>
          <textarea class="form-control" id="status-note" rows="3"></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
        <button type="button" class="btn btn-primary" id="confirm-status-update">Xác nhận</button>
      </div>
    </div>
  </div>
</div>

<!-- Thêm link đến DateRangePicker CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

<script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Lưu trữ tham chiếu đến các element
    const statusFilter = document.getElementById('status-filter');
    const paymentFilter = document.getElementById('payment-filter');
    const dateRangeInput = document.getElementById('date-range');
    const searchInput = document.querySelector('input[name="search"]');
    const searchForm = document.querySelector('form[action="/admin/orders"]');
    const resetFilterBtn = document.getElementById('reset-filter');
    const ordersTableBody = document.querySelector('#ordersTable tbody');
    const paginationContainer = document.querySelector('.pagination'); // Cần container cho phân trang
    const exportLink = document.getElementById('export-csv-link');
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content'); // Lấy token 1 lần

    // --- Khởi tạo DateRangePicker (giữ nguyên) ---
    $('#date-range').daterangepicker({
      autoUpdateInput: false,
      locale: {
        cancelLabel: 'Xóa',
        applyLabel: 'Áp dụng',
        fromLabel: 'Từ',
        toLabel: 'Đến',
        customRangeLabel: 'Tùy chỉnh',
        daysOfWeek: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
        monthNames: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 
                     'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
        firstDay: 1
      }
    });
    $('#date-range').on('apply.daterangepicker', function(ev, picker) {
        $(this).val(picker.startDate.format('DD/MM/YYYY') + ' to ' + picker.endDate.format('DD/MM/YYYY'));
        fetchOrders(); // Gọi fetch khi ngày thay đổi
    });
    $('#date-range').on('cancel.daterangepicker', function(ev, picker) {
        $(this).val('');
        fetchOrders(); // Gọi fetch khi xóa ngày
    });

    // --- Hàm lấy dữ liệu và render lại bảng ---
    async function fetchOrders(page = 1) {
      const status = statusFilter.value;
      const payment = paymentFilter.value;
      const dateRange = dateRangeInput.value;
      const search = searchInput.value;

      // Xây dựng query params
      const queryParams = new URLSearchParams();
      queryParams.set('page', page);
      if (status) queryParams.set('status', status);
      if (payment) queryParams.set('paymentMethod', payment);
      if (dateRange) queryParams.set('dateRange', dateRange);
      if (search) queryParams.set('search', search);

      const url = `/admin/orders?${queryParams.toString()}`;
      console.log('[Fetch Orders] Fetching URL:', url);

      try {
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'Accept': 'application/json', // Báo cho server biết muốn JSON
            'X-Requested-With': 'XMLHttpRequest' // Header thường dùng cho AJAX
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('[Fetch Orders] Data received:', data);

        // Render lại bảng
        renderOrderTable(data.orders);

        // Render lại phân trang
        renderPagination(data.currentPage, data.totalPages);

        // Cập nhật link export
        updateExportLink(queryParams); // Truyền queryParams đã tạo

        // Cập nhật URL trình duyệt
        history.pushState({ page: data.currentPage }, `Trang ${data.currentPage}`, url);

      } catch (error) {
        console.error('[Fetch Orders] Error fetching orders:', error);
        ordersTableBody.innerHTML = '<tr><td colspan="8" class="text-center text-danger">Có lỗi xảy ra khi tải dữ liệu.</td></tr>';
        if (paginationContainer) paginationContainer.innerHTML = ''; // Xóa phân trang cũ
      }
    }

    // --- Hàm render bảng đơn hàng ---
    function renderOrderTable(orders) {
      ordersTableBody.innerHTML = ''; // Xóa nội dung cũ

      if (!orders || orders.length === 0) {
        ordersTableBody.innerHTML = '<tr><td colspan="8" class="text-center">Không có đơn hàng nào phù hợp.</td></tr>';
        return;
      }

      orders.forEach(order => {
        const row = `
          <tr>
            <td>
              <a href="/admin/orders/${order._id}" class="text-primary font-weight-bold">
                #${order.orderNumber}
              </a>
            </td>
            <td>
              ${order.user ? order.user.name : (order.shippingAddress.fullName + ' <small class="text-muted">(Khách)</small>')}
            </td>
            <td>${new Date(order.createdAt).toLocaleDateString('vi-VN')}</td>
            <td>${order.totalAmount ? order.totalAmount.toLocaleString('vi-VN') : '0'} ₫</td>
            <td>
              ${order.paymentMethod === 'cod' ? '<span class="badge bg-secondary">Tiền mặt</span>' :
                order.paymentMethod === 'paypal' ? '<span class="badge bg-primary">PayPal</span>' :
                order.paymentMethod === 'vnpay' ? '<span class="badge bg-info">VNPay</span>' : ''}
            </td>
            <td>
              ${order.isPaid ? '<span class="badge bg-success">Đã thanh toán</span>' : '<span class="badge bg-warning text-dark">Chưa thanh toán</span>'}
            </td>
            <td>
              <select class="form-select form-select-sm order-status-select"
                      data-order-id="${order._id}"
                      ${order.status === 'delivered' || order.status === 'canceled' ? 'disabled' : ''}>
                <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>Chờ xử lý</option>
                <option value="processing" ${order.status === 'processing' ? 'selected' : ''}>Đang xử lý</option>
                <option value="shipped" ${order.status === 'shipped' ? 'selected' : ''}>Đang giao</option>
                <option value="delivered" ${order.status === 'delivered' ? 'selected' : ''}>Đã giao</option>
                <option value="canceled" ${order.status === 'canceled' ? 'selected' : ''}>Đã hủy</option>
              </select>
            </td>
            <td>
              <div class="btn-group">
                <a href="/admin/orders/${order._id}" class="btn btn-sm btn-info" title="Xem chi tiết">
                  <i class="fas fa-eye"></i>
                </a>
                <button class="btn btn-sm btn-primary print-invoice" data-order-id="${order._id}" title="In hóa đơn">
                  <i class="fas fa-print"></i>
                </button>
              </div>
            </td>
          </tr>
        `;
        ordersTableBody.insertAdjacentHTML('beforeend', row);
      });

      // Gắn lại sự kiện cho các element mới được tạo (nếu cần, ví dụ: status update)
      attachEventListenersToNewRows();
    }

    // --- Hàm render phân trang ---
    function renderPagination(currentPage, totalPages) {
        if (!paginationContainer) return;
        paginationContainer.innerHTML = ''; // Xóa phân trang cũ

        if (totalPages <= 1) return; // Không cần hiển thị nếu chỉ có 1 trang

        let paginationHTML = '';

        // Nút Previous
        paginationHTML += `
            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>`;

        // Các nút trang
        for (let i = 1; i <= totalPages; i++) {
            paginationHTML += `
                <li class="page-item ${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                </li>`;
        }

        // Nút Next
        paginationHTML += `
            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>`;

        paginationContainer.innerHTML = paginationHTML;
    }

    // --- Hàm cập nhật link Export CSV ---
    function updateExportLink(queryParams) { // Nhận queryParams làm đối số
      if(exportLink) {
          exportLink.href = `/admin/orders/export?${queryParams.toString()}`;
      }
    }

    // --- Gắn sự kiện ---
    statusFilter.addEventListener('change', () => fetchOrders(1)); // Lấy trang 1 khi lọc
    paymentFilter.addEventListener('change', () => fetchOrders(1));

    searchForm.addEventListener('submit', function(event) {
      event.preventDefault(); // Ngăn submit form mặc định
      fetchOrders(1); // Gọi fetch thay vì submit
    });

    resetFilterBtn.addEventListener('click', function() {
      statusFilter.value = '';
      paymentFilter.value = '';
      dateRangeInput.value = '';
       $('#date-range').trigger('cancel.daterangepicker'); // Kích hoạt sự kiện cancel để xóa giá trị
      searchInput.value = '';
      fetchOrders(1); // Fetch lại với bộ lọc trống
    });

    // Xử lý click vào nút phân trang (dùng event delegation)
    if (paginationContainer) {
        paginationContainer.addEventListener('click', function(event) {
            event.preventDefault();
            const target = event.target.closest('a.page-link'); // Tìm thẻ <a> gần nhất
            if (target && target.dataset.page) {
                const page = parseInt(target.dataset.page, 10);
                if (!isNaN(page)) {
                    fetchOrders(page);
                }
            }
        });
    }

    // --- Xử lý cập nhật trạng thái (cần event delegation) ---
    const statusModal = new bootstrap.Modal(document.getElementById('statusUpdateModal'));
    const newStatusText = document.getElementById('new-status-text');
    const confirmStatusBtn = document.getElementById('confirm-status-update');
    const statusNote = document.getElementById('status-note');
    let activeOrderId = null;
    let originalStatusValue = null; // Lưu giá trị value thay vì text

    function attachEventListenersToNewRows() {
        document.querySelectorAll('.order-status-select').forEach(select => {
            // Xóa listener cũ nếu có để tránh gắn nhiều lần
            select.removeEventListener('change', handleStatusChange);
            // Gắn listener mới
            select.addEventListener('change', handleStatusChange);
            // Lưu trạng thái gốc vào data attribute
            select.setAttribute('data-original-status', select.value);
        });

        document.querySelectorAll('.print-invoice').forEach(button => {
            button.removeEventListener('click', handlePrintInvoice);
            button.addEventListener('click', handlePrintInvoice);
        });
    }

    function handleStatusChange() {
        activeOrderId = this.dataset.orderId;
        originalStatusValue = this.getAttribute('data-original-status'); // Lấy giá trị gốc đã lưu
        newStatus = this.value;
        newStatusText.textContent = this.options[this.selectedIndex].text;
        statusNote.value = '';
        statusModal.show();
    }

     function handlePrintInvoice() {
        const orderId = this.dataset.orderId;
        window.open(`/admin/orders/${orderId}/invoice`, '_blank');
    }


    confirmStatusBtn.addEventListener('click', function() {
      if (!activeOrderId || !newStatus || !csrfToken) {
          alert('Lỗi: Không tìm thấy thông tin đơn hàng hoặc token bảo mật.');
          return;
      }

      fetch(`/admin/orders/${activeOrderId}/status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({ status: newStatus, note: statusNote.value })
      })
      .then(response => response.ok ? response.json() : response.json().then(err => Promise.reject(err)))
      .then(data => {
        if (data.success) {
          statusModal.hide();
          fetchOrders(document.querySelector('.pagination .active a')?.dataset.page || 1); // Tải lại trang hiện tại
          // Có thể thêm thông báo thành công ở đây nếu muốn
        } else {
          alert(data.message || 'Có lỗi xảy ra khi cập nhật trạng thái');
        }
      })
      .catch(error => {
        console.error('Lỗi cập nhật trạng thái:', error);
        alert(`Có lỗi xảy ra: ${error.message || 'Vui lòng thử lại'}`);
      });
    });

    document.getElementById('statusUpdateModal').addEventListener('hidden.bs.modal', function() {
        const activeSelect = document.querySelector(`.order-status-select[data-order-id="${activeOrderId}"]`);
        if (activeSelect && originalStatusValue !== null && activeSelect.value !== originalStatusValue) {
           // Nếu người dùng đóng modal mà không xác nhận, đặt lại giá trị gốc
           activeSelect.value = originalStatusValue;
        }
        activeOrderId = null;
        originalStatusValue = null;
        newStatus = null;
    });

    // Gọi lần đầu để tải dữ liệu
    fetchOrders();
    // Gắn sự kiện ban đầu
    attachEventListenersToNewRows();

    // Xử lý bộ lọc trạng thái
    const statusFilter = document.getElementById('status-filter');
    statusFilter.addEventListener('change', function() {
        const url = new URL(window.location.href);
        if (this.value) {
            url.searchParams.set('status', this.value);
        } else {
            url.searchParams.delete('status');
        }
        url.searchParams.delete('page'); // Reset page when filter changes
        window.location.href = url.toString();
    });

    // Xử lý bộ lọc phương thức thanh toán
    const paymentFilter = document.getElementById('payment-filter');
    paymentFilter.addEventListener('change', function() {
        const url = new URL(window.location.href);
        if (this.value) {
            url.searchParams.set('paymentMethod', this.value);
        } else {
            url.searchParams.delete('paymentMethod');
        }
        url.searchParams.delete('page');
        window.location.href = url.toString();
    });

    // Xử lý daterangepicker
    $('#date-range').daterangepicker({
        autoUpdateInput: false,
        locale: {
            cancelLabel: 'Xóa',
            applyLabel: 'Áp dụng',
            fromLabel: 'Từ',
            toLabel: 'Đến',
            customRangeLabel: 'Tùy chọn',
            daysOfWeek: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
            monthNames: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6',
                'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
            firstDay: 1
        }
    });

    $('#date-range').on('apply.daterangepicker', function(ev, picker) {
        const dateRange = picker.startDate.format('DD/MM/YYYY') + ' - ' + picker.endDate.format('DD/MM/YYYY');
        $(this).val(dateRange);
        $('#date-range-hidden').val(dateRange);
        
        const url = new URL(window.location.href);
        url.searchParams.set('dateRange', dateRange);
        url.searchParams.delete('page');
        window.location.href = url.toString();
    });

    $('#date-range').on('cancel.daterangepicker', function(ev, picker) {
        $(this).val('');
        $('#date-range-hidden').val('');
        
        const url = new URL(window.location.href);
        url.searchParams.delete('dateRange');
        url.searchParams.delete('page');
        window.location.href = url.toString();
    });

    // Xử lý nút reset bộ lọc
    document.getElementById('reset-filter').addEventListener('click', function() {
        window.location.href = '/admin/orders';
    });

    // Xử lý xuất CSV
    document.getElementById('export-csv-link').addEventListener('click', function(e) {
        e.preventDefault();
        const url = new URL(this.href);
        
        // Thêm các bộ lọc hiện tại vào URL xuất CSV
        const currentUrl = new URL(window.location.href);
        for (const [key, value] of currentUrl.searchParams.entries()) {
            url.searchParams.append(key, value);
        }
        
        window.location.href = url.toString();
    });

    // Xử lý cập nhật trạng thái đơn hàng
    const statusButtons = document.querySelectorAll('.update-status');
    statusButtons.forEach(button => {
        button.addEventListener('click', async function() {
            const orderId = this.dataset.orderId;
            const newStatus = this.dataset.status;
            
            try {
                const response = await fetch(`/admin/orders/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': '<%= csrfToken %>'
                    },
                    body: JSON.stringify({ status: newStatus })
                });
                
                const data = await response.json();
                if (data.success) {
                    // Reload trang sau khi cập nhật thành công
                    window.location.reload();
                } else {
                    alert('Có lỗi xảy ra khi cập nhật trạng thái đơn hàng');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi cập nhật trạng thái đơn hàng');
            }
        });
    });
  });
</script> 