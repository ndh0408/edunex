// Script kh·ªüi t·∫°o t√†i kho·∫£n admin
require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User');

// K·∫øt n·ªëi MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/edunex', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng');
  } catch (err) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err);
    process.exit(1);
  }
};

// T·∫°o t√†i kho·∫£n admin
const createAdmin = async () => {
  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ t√†i kho·∫£n admin ch∆∞a
    const existingAdmin = await User.findOne({ role: 'admin' });
    if (existingAdmin) {
      console.log('‚ö†Ô∏è T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn t·∫°o m·ªõi');
      return;
    }

    // M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
    const defaultPassword = '123456';

    // T·∫°o admin
    const admin = new User({
      name: 'Admin',
      email: 'admin@example.com',
      password: defaultPassword,
      phone: '0987654321',
      address: 'H√† N·ªôi, Vi·ªát Nam',
      role: 'admin'
    });
    await admin.save();

    console.log('‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n admin th√†nh c√¥ng');
    console.log('üìß Email: admin@example.com');
    console.log('üîë M·∫≠t kh·∫©u: 123456');
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o t√†i kho·∫£n admin:', error);
    throw error;
  }
};

// H√†m ch√≠nh
const seedAdmin = async () => {
  try {
    // K·∫øt n·ªëi database
    await connectDB();
    
    // T·∫°o t√†i kho·∫£n admin
    await createAdmin();
    
    console.log('‚úÖ ƒê√£ ho√†n th√†nh kh·ªüi t·∫°o d·ªØ li·ªáu');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh kh·ªüi t·∫°o d·ªØ li·ªáu:', error);
    process.exit(1);
  }
};

// Ch·∫°y script
seedAdmin(); 